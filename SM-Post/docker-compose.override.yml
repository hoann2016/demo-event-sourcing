version: '3.4'

services:
  querydb:
        container_name: sqlserver-querydb-container
        environment:
          - ACCEPT_EULA=Y
          - SA_PASSWORD=Password123
        restart: always
        ports:
          - "1436:1433"
 
  commanddb:
        container_name: mongo-commandb-container
        restart: always
        volumes:
        - mongo-data:/data/db
        ports:
          - "27017:27017"
        environment:
          - MONGO_INITDB_ROOT_USERNAME=admin  
          - MONGO_INITDB_ROOT_PASSWORD=admin
          - MONGO_INITDB_DATABASE=socialMedia
        command: --auth

  zookeeper:
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    ports:
      - "9092:9092"
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://host.docker.internal:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CREATE_TOPICS=socialMedia:1:1
    depends_on:
      - zookeeper
    
  storage:
    image: openzipkin/zipkin-mysql
    container_name: mysql

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
      - MYSQL_HOST=storage
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
     # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      #- JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410
    depends_on:
      storage:
         condition: service_healthy
 

  dependencies:
    image: openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=mysql
      - MYSQL_HOST=storage
      # Add the baked-in username and password for the zipkin-mysql image
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to see dependency processing logs
      # - ZIPKIN_LOG_LEVEL=DEBUG
      # Uncomment to adjust memory used by the dependencies job
      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
    depends_on:
      storage:
         condition: service_healthy

  prometheus:
    # Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas
    # Use latest from https://quay.io/repository/prometheus/prometheus?tab=tags
    image: quay.io/prometheus/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - 9090:9090
    depends_on:
      zipkin:
        condition: service_healthy
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    # Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas
    # Use latest from https://quay.io/repository/app-sre/grafana?tab=tags
    image: quay.io/giantswarm/grafana:7.5.9
    container_name: grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin

  setup_grafana_datasource:
    # This is an arbitrary small image that has curl installed
    # Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas
    # Use latest from https://quay.io/repository/quay.io/rackspace/curl?tab=tags
    image: quay.io/cilium/alpine-curl:v1.9.0
    container_name: setup_grafana_datasource
    depends_on:
      - grafana
    volumes:
      - ./prometheus/create-datasource-and-dashboard.sh:/tmp/create.sh:ro
    working_dir: /tmp
    entrypoint: /tmp/create.sh



  post.cmd.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - MongoDbConfig__ConnectionString=mongodb://localhost:27017
      - MongoDbConfig__Database=socialMedia
      - MongoDbConfig__Collection=eventStore
      - MongoDbConfig__UserName=admin
      - MongoDbConfig__Password=admin
      - MongoDbConfig__Host=host.docker.internal
      - ProducerConfig__BootstrapServers=host.docker.internal:9092
      - ProducerConfig__Topic=socialMedia
      - KAFKA_TOPIC=socialMedia
      - ZIPKIN_URI=http://host.docker.internal:9411
    ports:
      - "7080:8080"
      - "7081:8081"
    depends_on:
      - commanddb
      - kafka
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro

  post.query.api:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
      - ConnectionStrings__SqlServer=Data Source=querydb;Initial Catalog=SocialMedia;User ID=sa;Password=Password123;Trust Server Certificate=True
      - ConsumerConfig__BootstrapServers=host.docker.internal:9092
      - ConsumerConfig__GroupId=SM_Consumer
      - ConsumerConfig__AutoOffsetReset=earliest
      - ProducerConfig__EnableAutoCommits=false
      - ProducerConfig__AllowAutoCreateTopics=true
      - KAFKA_TOPIC=socialMedia
      - ZIPKIN_URI=http://host.docker.internal:9411
    depends_on:
      - querydb
      - kafka
      - zipkin
    ports:
      - "9080:8080"
      - "9081:8081"
    volumes:
      - ${APPDATA}/Microsoft/UserSecrets:/home/app/.microsoft/usersecrets:ro
      - ${APPDATA}/ASP.NET/Https:/home/app/.aspnet/https:ro
     
